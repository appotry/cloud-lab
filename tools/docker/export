#!/bin/sh
#
# export -- export the vnc/ssh/webssh ports to internet
#
# Copyright (C) 2016-2021 Wu Zhangjin <falcon@ruma.tech>
#
# Note: scripts/web-ubuntu.sh of https://github.com/tinyclub/cloud-ubuntu
#

TOP_DIR="$(cd "$(dirname "$0")"/../../ && pwd)"
. "$TOP_DIR"/tools/docker/config >/dev/null

[ -z "$WPROXY_IP" ] && prepare_cloud_lab_net

IMAGE_NAME=tinylab/$WPROXY_NAME
[ -n "$WPROXY_TAG" ] && IMAGE_NAME=$IMAGE_NAME:$WPROXY_TAG

id=$(docker ps -a -f name=$WPROXY_NAME -f status=running -q)
[ -n "$id" ] && echo "ERR: $WPROXY_NAME has already been created" && exit 0

prepare_export_files

CONTAINER_VNC_PORT=6080
CONTAINER_WEBSSH_PORT=443

DEFAULT_PORT_MAP=" -p $HOST_VNC_PORT:$CONTAINER_VNC_PORT -p $HOST_SSH_PORT:$CONTAINER_SSH_PORT -p $HOST_WEBSSH_PORT:$CONTAINER_WEBSSH_PORT "

# Available encrypt cmds: sha1sum, sha224sum, cksum, sha256sum, sha512sum, md5sum, sha384sum, sum
# To enable auto timeout, please pass VNC_TIMEOUT=1
[ -z "$VNC_RELEASE" ] && VNC_RELEASE=0
[ -z "$VNC_PUBLIC" ] && VNC_PUBLIC=0
[ -z "$GATEONE_PUBLIC" ] && GATEONE_PUBLIC=0
[ -z "$VNC_TIMEOUT" ] && VNC_TIMEOUT=0
[ -z "$VNC_AUTH" ] && VNC_AUTH=""
[ -z "$PROXY_LIMIT" ] && PROXY_LIMIT=0
[ -z "$ENCRYPT_CMD" ] && ENCRYPT_CMD="cat"
[ -z "$UNIX_PWD" ] && UNIX_PWD=`get_random_pwd`
[ -z "$VNC_PWD" ] && VNC_PWD=`get_random_pwd`
[ -n "$UNIX_PWD" ] && UNIX_PWD=`echo $UNIX_PWD | tr -d '\n' | $ENCRYPT_CMD | cut -d' ' -f1`
[ -n "$VNC_PWD" ] && VNC_PWD=`echo $VNC_PWD | tr -d '\n' | $ENCRYPT_CMD | cut -d' ' -f1`

[ -z "$TOKEN_LENGTH" ] && TOKEN_LENGTH=$DEF_TOKEN_LENGTH
[ -z "$HOST_NAME" ] && HOST_NAME=localhost
[ -z "$PORT_MAP" ] && PORT_MAP="$DEFAULT_PORT_MAP"
[ -z "$ENV_ARGS" ] && ENV_ARGS=" -e VNC_PUBLIC=$VNC_PUBLIC -e GATEONE_PUBLIC=$GATEONE_PUBLIC -e VNC_TIMEOUT=$VNC_TIMEOUT -e VNC_AUTH=$VNC_AUTH -e UNIX_PWD=$UNIX_PWD -e VNC_PWD=$VNC_PWD -e SCREEN_SIZE=$SCREEN_SIZE -e PROXY_LIMIT=$PROXY_LIMIT -e NOSSL=$WEB_NOSSL -e ENCRYPT_CMD=$ENCRYPT_CMD"
[ -z "$EXTRA_ARGS" ] && EXTRA_ARGS=""

# Mount a directory for storing the noVNC recording sessions
[ -z "$VNC_RECORDINGS" ] && VNC_RECORDINGS=recordings
[ -z "$VNC_RELEASINGS" ] && VNC_RELEASINGS=labs
[ -z "$VNC_TOKEN_DIR" ] && VNC_TOKENS=.vnc-tokens
CONTAINER_RECORD_DIR=//noVNC/$VNC_RECORDINGS
CONTAINER_RELEASE_DIR=//noVNC/$VNC_RELEASINGS
CONTAINER_TOKEN_DIR=//$VNC_TOKENS

# Fixed up for docker toolbox in windows
# ref: https://headsigned.com/posts/mounting-docker-volumes-with-docker-toolbox-for-windows/
VOLUME_MAP=" -v '/$HOST_RECORD_DIR':'$CONTAINER_RECORD_DIR'"
debug_print "VNC screen recorded in $HOST_RECORD_DIR"

if [ $VNC_RELEASE -ne 0 ]; then
  VOLUME_MAP="$VOLUME_MAP -v '/$HOST_RELEASE_DIR':'$CONTAINER_RELEASE_DIR'"
  debug_print "VNC pages released in $HOST_RELEASE_DIR"
fi

VOLUME_MAP="$VOLUME_MAP -v '/$HOST_TOKEN_DIR':'$CONTAINER_TOKEN_DIR'"
debug_print "VNC tokens stored in $HOST_TOKEN_DIR"

# Disable rsyslog, fail2ban and sshd for zero security level
sshd_conf=/etc/supervisor/conf.d/sshd.conf
if [ "x$LAB_SECURITY" = "x0" ]; then
   VOLUME_MAP="$VOLUME_MAP -v '/$TOOL_DIR/web/$sshd_conf':'/$sshd_conf':ro"
fi

[ -n "$WPROXY_IP" ] && ip="--ip=$WPROXY_IP"
WPROXY_NET="$ip --network $VNC_NET_NAME"

# Prepare necessary directories and files
touch_export_files

eval docker run $WPROXY_NET \
	--name $WPROXY_NAME --privileged -d -t \
	$PORT_MAP $VOLUME_MAP $ENV_ARGS $WPROXY_LIMITS $EXTRA_ARGS \
	-h $HOST_NAME $IMAGE_NAME
